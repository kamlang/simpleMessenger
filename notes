registration ok
login ok
next transfer everything to WTFforms done
put a logout button  done
check csrf token done
auto increment id for user db ok
create an admin panel to remove user done
put a message like you're currently log as user (would require to check each time a page is loaded ? done
implement user roles done
menu role link to access dictionnary done
restrict access to admin functionality done
add Bootstrap support done
add nice looking pages done
update role, make a new fb for role. done
add an extra database to play with foreign key. done
for admin view create a better way to get user role. done
add remember me functionallity done
display form warning nicely done
modify register view as validators have been added to models done
add validators in model done
create custom error pages done
add image to profile done
implement private message done
display messages when clikcking on conversations done
give the possiblity to send a message in a conversation (be carefull to validation) done
remove welcom page go directly to login done
change the way registration is handled. don't log user in to confirm account done
auto update discussion and conversation done
change html so you use class instead of ids done
also refactor css file done
do not display add user if not admin done
create conversation can be change not done because unreadable
add avatars in conversation done
edit user form is broken done
order javascript code
handle user disconnection ? done with stream_context
make a profile page with the possibility of uploading a picture done
see error raised by wtfroms done
stream pour les converesations notification done
fix admin panel especially user edit function done
replace current user with "Me" when create new element done
redis should also push the number of new messages. done
fix "converation" in ConversationUsers done
uuid for conversation done
give the possibility to leave a group. done
ask confirmation before deleting a conversation done
also change cursor on the delete button done
refactor app models done
Choose where to perform security checks, main view or models, I think it's better in models done
handle error api return json not html done
create a bp for stream and xhr it juse have to be consistent done
fix API message push to redis; move stream func to another bp done
add icon when conversation is update via redis done
also allow user to get an api_key
api get conversation return participant

#### 

doc API

 /help endpoint create an API page to document API
/api/help when error
provide a dictonarry with something like endpoint: help:

when api request is not well formated an APIusage error can be raised
store api key as a hash treat it as password

implement custom exception
refactor js
give the ability to remove a message and a user

validating password with regex.

build api to get message, and send message
prevent bruteforce attack
secure file upload checking mime type ?
try to upload something stupid

#####

deploy on heroku
but before push the thing to github
create requirement.txt

####

redis ssl

check csrf validation
page reload doesn't work very well
set some event type in redis
to push thing like conversation_remove aor message remove event

think about tests
change is_role not pretty
change user to participant ?
choose between user and username participant this confuisng rn

It would be nice to be connected to the stream throught parent template.
Then check if user is in conversations or conversation/number ...
and handle thing differently.
maybe also add a "have been read attribute to conversation which would be trigger each time a user click on a conversation.

@property ?

###

about conversation:
check socketio 
event sqlalchemy ?
add change password features

infinite scroll json ?

validate url parameters
maybe with werkzeug

setup email messages
design a form to send a message

setup https with let's encrypt
set cookie params for timeout 

###

add search in notes feature

think of nice feature to implement and draw how they should look

And create article then allow user to comment.
newsletter functionallity

Things to implement:
description me, small cv, readings.
page not confirmed show all remove submit label
create dictionnary contain errors to get more consistency
